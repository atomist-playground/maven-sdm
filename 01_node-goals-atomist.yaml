configuration:
  logging:
    level: info
  sdm:
    cache:
      enabled: true
      path: /tmp/cache
    goal:
      timeout: 1200000
      docker:
        registry: atomistplayground
        provider: atomist

  # Configure goal Docker images here
  images:
  - &version_image atomist/version-goal:0.1.0-master.20191112221212
  - &node_image node:lts
  - &docker_image docker:19.03.4

  # Set up some common secrets to be used by goals
  secrets:
    npmjs: &secret_npmjs
      mount_path: /root/.npmrc
      value:
        provider:
          type: npm
          names:
            - npmjs
    docker: &secret_docker
      mount_path: /root/.docker/config.json
      value:
        provider:
          type: docker
          names:
            - atomist

immaterial:
  test:
  - not:
      is_material_change:
        files:
          - package.json
          - Dockerfile
        extensions:
          - ts

  goals: lock

node_build:
  test: 
  - has_file: package.json
     
  goals:
  - containers:
    - name: npm version
      image: *version_image
    output:
    - classifier: version
      pattern:
        glob_pattern:
        - package.json
 
  - containers:
    - name: npm test
      image: *node_image
      env:
      - name: NODE_ENV
        value: development
      - name: BLUEBIRD_WARNINGS
        value: '0'
      args:
      - sh
      - -c
      - npm ci && npm run compile --if-present && npm run test --if-present
    input:
    - version
    output:
    - classifier: compile-ts
      pattern:
        glob_pattern:
        - "*.{d.ts,js}{,.map}"
        - "!(node_modules)/**/*.{d.ts,js}{,.map}"
        - "lib/typings/types.ts"
        - "git-info.json"
    retry: true

  - containers:
    - name: npm publish
      image: *node_image
      args:
      - sh
      - -c
      - npm publish --tag branch-${branch}
      secrets:
        file_mounts:
        - <<: *secret_npmjs
    input:
    - version
    - compile-ts
    retry: true

  - tag

docker_build:
  test:
    - has_file: package.json
    - has_file: Dockerfile

  depends_on:
    - node_build

  goals:
  - containers:
    - name: docker build
      image: *docker_image
      args:
      - sh
      - -c
      - >-
        docker build . -f Dockerfile -t atomist/${push.repo.name}:${push.after.version} &&
        docker push atomist/${push.repo.name}:${push.after.version} &&
        echo '{ "SdmGoal": { "push": { "after": { "images" :[{ "imageName": "atomist/${push.repo.name}:${push.after.version}" }] } } } }' > $ATOMIST_RESULT
      volume_mounts:
      - name: sock
        mount_path: /var/run/docker.sock
      secrets:
        file_mounts:
        - <<: *secret_docker
    input:
    - version
    - compile-ts
    volumes:
    - name: sock
      host_path:
        path: /var/run/docker.sock
    retry: true
